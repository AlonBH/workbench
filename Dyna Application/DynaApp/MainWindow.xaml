<Window x:Class="DynaApp.MainWindow"
        x:Name="mainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Dyna Project"
        Height="800" Width="500"
        FocusManager.FocusedElement="{Binding ElementName=modelControl}"
        xmlns:views="clr-namespace:DynaApp.Views"
        xmlns:viewModels="clr-namespace:DynaApp.ViewModels"
        xmlns:controls="clr-namespace:DynaApp.Controls"
        >

    <Window.Resources>
        <ResourceDictionary>

            <!-- The brush for connections. -->
            <SolidColorBrush
                x:Key="connectionBrush"
                Color="Black"
                />

            <!-- The border brush for variables. -->
            <SolidColorBrush
                x:Key="variableBorderBrush"
                Color="Black"
                />

            <!-- The brush for connectors. -->
            <SolidColorBrush
                x:Key="connectorBackgroundBrush"
                Color="White"
                />

        <!-- UI commands. -->
        <RoutedUICommand x:Key="Commands.DeleteSelectedGraphics" />
        <RoutedUICommand x:Key="Commands.CreateVariable" />
        <RoutedUICommand x:Key="Commands.CreateConstraint" />
        <RoutedUICommand x:Key="Commands.CreateDomain" />
        <RoutedUICommand x:Key="Commands.DeleteConnection" />
        <RoutedUICommand x:Key="Commands.DeleteVariable" />
        <RoutedUICommand x:Key="Commands.DeleteDomain" />
        <RoutedUICommand x:Key="Commands.DeleteConstraint" />
        <RoutedUICommand x:Key="Commands.Solve"/>

        <!-- 
        Template for the button that is used to delete nodes and connections in the graph.
        This button is displayed in an adorner when the user hovers the mouse over a node or connection.
        -->
        <ControlTemplate 
                x:Key="deleteButtonTemplate"
                TargetType="{x:Type Button}"
                >
            <Grid
                x:Name="grid"
                >
                <Grid.RenderTransform>
                    <ScaleTransform
                        ScaleX="1"
                        ScaleY="1"
                        CenterX="10"
                        CenterY="10"
                        />
                </Grid.RenderTransform>
                <Ellipse
                    x:Name="shadow"
                    VerticalAlignment="Stretch"
                    HorizontalAlignment="Stretch"
                    Fill="Gray"
                    >
                    <Ellipse.RenderTransform>
                        <TranslateTransform
                            X="1.5"
                            Y="1.5"
                            />
                    </Ellipse.RenderTransform>
                </Ellipse>
                <Ellipse
                    x:Name="ellipse"
                    Stroke="Black"
                    VerticalAlignment="Stretch"
                    HorizontalAlignment="Stretch"
                    Fill="White"
                    />
                <Image
                    Source="/Images/scissors.png" 
                    Margin="2"
                    />
            </Grid>
            <ControlTemplate.Triggers>
                <EventTrigger
                    RoutedEvent="Mouse.MouseEnter"
                    >
                    <!-- 
                    Make the 'delete connection button' larger when the mouse 
                    cursor is hovered over it.
                    -->
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation
                                Storyboard.TargetName="grid"
                                Storyboard.TargetProperty="RenderTransform.ScaleX"
                                To="1.3"
                                Duration="0:0:0.25"
                                />
                            <DoubleAnimation
                                Storyboard.TargetName="grid"
                                Storyboard.TargetProperty="RenderTransform.ScaleY"
                                To="1.3"
                                Duration="0:0:0.25"
                                />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>

                <EventTrigger
                        RoutedEvent="Mouse.MouseLeave"
                        >
                    <!-- 
                        Return the 'delete connection button' to normal size when the mouse
                        cursor is moved away.
                        -->
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation
                                Storyboard.TargetName="grid"
                                Storyboard.TargetProperty="RenderTransform.ScaleX"
                                To="1"
                                Duration="0:0:0.05"
                                />
                            <DoubleAnimation
                                Storyboard.TargetName="grid"
                                Storyboard.TargetProperty="RenderTransform.ScaleY"
                                To="1"
                                Duration="0:0:0.05"
                                />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
            </ControlTemplate.Triggers>

        </ControlTemplate>

        <DataTemplate DataType="{x:Type viewModels:ModelViewModel}">
            <!--
            The ScrollViewer displays scrollbars when the content is too big to fit in the viewport. 
            Focusable is set to False because it is only that ModelView that I want to be focusable.
            -->
            <ScrollViewer
                x:Name="contentViewer"
                HorizontalScrollBarVisibility="Auto"
                Focusable="False">

                <!--
                We need to nest the ModelView inside an AdornerDecorator so that adorners 
                work correctly.
                -->
                <AdornerDecorator>
                    
                    <views:ModelView 
                        x:Name="modelControl"
                        Width="2000" Height="2000"
                        VariablesSource="{Binding Variables}"
                        DomainsSource="{Binding Domains}"
                        ConstraintsSource="{Binding Constraints}"
                        ConnectionsSource="{Binding Connections}"
                    
                        ConnectionDragStarted="modelControl_ConnectionDragStarted"
                        ConnectionDragging="modelControl_ConnectionDragging"
                        QueryConnectionFeedback="modelControl_QueryConnectionFeedback"
                        ConnectionDragCompleted="modelControl_ConnectionDragCompleted"
                        />

                </AdornerDecorator>

            </ScrollViewer>
        </DataTemplate>

        <DataTemplate DataType="{x:Type viewModels:SolutionViewModel}">
            <ListView x:Name="valuesListBox"
                      ItemsSource="{Binding Values}">
                <ListView.View>
                    <GridView>
                        <GridViewColumn Header="Name" 
                                        DisplayMemberBinding="{Binding Name}"/>
                        <GridViewColumn Header="Value" 
                                        DisplayMemberBinding="{Binding Value}"/>
                    </GridView>
                </ListView.View>
            </ListView>
        </DataTemplate>

        <!-- 
        Data-template for ConectionViewModel.
        
        Note that the 'Start' and 'End' of the arrow are bound to 'SourceConnectorHotspot' and 'DestConnectorHotspot' in 
        the view-model.

        In this sample a straight arrow represents connections between variables.
        -->
        <DataTemplate
            DataType="{x:Type viewModels:ConnectionViewModel}"
            >

            <!-- 
            An adorned control is used, to represent the connection. 
            When the user hovers the mouse cursor over the connection, the 
            'delete connection' adorner pops up and allows them to delete the connection.
            -->
            <controls:AdornedControl
                HorizontalAdornerPlacement="Mouse"
                VerticalAdornerPlacement="Mouse"
                IsMouseOverShowEnabled="{Binding ElementName=modelControl, Path=IsNotDragging}"
                >

                <!-- The connection is represented by a curved arrow. -->
                <controls:CurvedArrow
                    Stroke="{StaticResource connectionBrush}"
                    StrokeThickness="2"
                    Fill="{StaticResource connectionBrush}"
                    Points="{Binding Points}"
                    />

                    <controls:AdornedControl.AdornerContent>

                    <!-- 
                    This is the adorner that pops up when the user hovers the mouse over the connection.
                    It displays a button that the user can click to delete the connection.
                    -->
                    <Canvas
                        x:Name="connectionAdornerCanvas"
                        HorizontalAlignment="Right"
                        VerticalAlignment="Top"
                        Width="30"
                        Height="30"
                        >
                        <Line
                            X1="0"
                            Y1="30"
                            X2="15"
                            Y2="15"
                            Stroke="Black"
                            StrokeThickness="1"
                            />
                        <Button
                            x:Name="deleteConnectionButton"
                            Canvas.Left="10"
                            Canvas.Top="0"
                            Width="20"
                            Height="20"
                            Cursor="Hand"
                            Focusable="False"
                            Command="{StaticResource Commands.DeleteConnection}"
                            CommandParameter="{Binding}"
                            Template="{StaticResource deleteButtonTemplate}"
                            />
                    </Canvas>
                </controls:AdornedControl.AdornerContent>
            </controls:AdornedControl>
        </DataTemplate>

        <!--
        Define the visual style for a 'VariableItem'.
        
        Binds 'X' and 'Y' in the view-model (the 'VariableViewModel' class)
        to 'X' and 'Y' in the VariableItem class.
        
        This sets the position of the variable within the Canvas.
        -->
        <Style TargetType="{x:Type controls:VariableItem}">
            <Setter
                Property="X"
                Value="{Binding X}"
                />
            <Setter
                Property="Y"
                Value="{Binding Y}"
                />
            <Setter
                Property="IsSelected"
                Value="{Binding IsSelected}"
                />
        </Style>

        <!--
        Define the visual style for a DomainItem.
        -->
        <Style TargetType="{x:Type controls:DomainItem}">
            <Setter
                Property="X"
                Value="{Binding X}"
                />
            <Setter
                Property="Y"
                Value="{Binding Y}"
                />
            <Setter
                Property="IsSelected"
                Value="{Binding IsSelected}"
                />
        </Style>

        <!--
        Define the visual style for a ConstraintItem.
        -->
        <Style TargetType="{x:Type controls:ConstraintItem}">
            <Setter
                Property="X"
                Value="{Binding X}"
                />
            <Setter
                Property="Y"
                Value="{Binding Y}"
                />
            <Setter
                Property="IsSelected"
                Value="{Binding IsSelected}"
                />
        </Style>

        <!-- 
        This graphic is used to indicate that a connection cannot be made 
        between two particular connectors.        
        -->
        <DataTemplate DataType="{x:Type controls:ConnectionBadIndicator}">
            <Grid Width="80">
                <Image 
                    Width="32"
                    Height="32"
                    Source="/Images/block_16.png"
                    HorizontalAlignment="Right"
                    />
            </Grid>
        </DataTemplate>

        <!-- 
        This graphic is used to indicate that a connection can be made between 
        two particular connectors.        
        -->
        <DataTemplate DataType="{x:Type controls:ConnectionOkIndicator}">
            <Grid Width="80"> 
                <Image 
                    Width="32"
                    Height="32"
                    Source="/Images/tick_16.png"
                    HorizontalAlignment="Right"
                    />
            </Grid>
        </DataTemplate>

        <!-- 
        Define the visual style for a ConnectorItem.
        -->
        <Style 
            TargetType="{x:Type controls:ConnectorItem}">
            <!-- 
            Data-binding for the connector hotspot.
            ConnectorItem automatically computes its center 
            points and assigns this value to the 'Hotspot' property.  
            This data-binding in this style then 'pushes' the value into the 
            application view-model.
            -->
            <Setter 
                Property="Hotspot"
                Value="{Binding Hotspot, Mode=OneWayToSource}"
                />

            <!-- The visual template. -->
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate 
                        TargetType="{x:Type controls:ConnectorItem}"
                        >
                        <!-- The visual for the connector. -->
                        <Rectangle
                            Stroke="Black"
                            Fill="White"                            
                            Cursor="Hand"
                            Width="12"
                            Height="12"
                            RadiusX="1"
                            RadiusY="1"
                            />
                        </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- 
        Define a data-template for the 'VariableViewModel' class.
        This generates the UI for each variable.
        -->
        <DataTemplate
            DataType="{x:Type viewModels:VariableViewModel}"
            >

            <!-- 
            An adorned control is used, to represent the node. 
            When the user hovers the mouse cursor over the node, the 
            'delete node' adorner pops up and allows them to delete the node.
            -->
            <controls:AdornedControl
                HorizontalAdornerPlacement="Outside"
                VerticalAdornerPlacement="Outside"
                AdornerOffsetX="-12"
                AdornerOffsetY="8"
                IsMouseOverShowEnabled="{Binding ElementName=modelControl, Path=IsNotDragging}"
                >

                <Grid
                    Width="120"
                    Height="60"
                    >

                    <!-- This rectangle is the main visual for the variable. -->
                    <Rectangle
                        Stroke="Black"
                        Fill="White"
                        RadiusX="4"
                        RadiusY="4"
                        />

                <!-- 
                This grid contains the variable's name and connectors.
                The margin is negative so that the connectors overlap the body of the variable and it's selection border.
                -->
                <Grid Margin="-8">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" MinWidth="10" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>

                    <!-- The name of the variable. -->
                    <TextBox
                        Grid.Column="1"
                        Grid.Row="1"
                        Text="{Binding Name, Mode=TwoWay}"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        />

                    <!-- 
                    Define the variable's four connectors, one on each edge of the variable.
                    -->

                    <controls:ConnectorItem 
                        Grid.Row="0"
                        Grid.Column="1"
                        DataContext="{Binding Connectors[0]}"
                        />

                    <controls:ConnectorItem 
                        Grid.Row="1"
                        Grid.Column="2"
                        DataContext="{Binding Connectors[1]}"
                        />

                    <controls:ConnectorItem 
                        Grid.Row="2"
                        Grid.Column="1"
                        DataContext="{Binding Connectors[2]}"
                        />

                    <controls:ConnectorItem 
                        Grid.Row="1"
                        Grid.Column="0"
                        DataContext="{Binding Connectors[3]}"
                        />
                </Grid>
            </Grid>

            <controls:AdornedControl.AdornerContent>

                <!-- 
                This is the adorner that pops up when the user hovers the mouse over the variable.
                It displays a button that the user can click to delete the variable.
                -->
                <Canvas
                    x:Name="variableAdornerCanvas"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Top"
                    Width="30"
                    Height="30"
                    >
                    <Line
                        X1="0"
                        Y1="30"
                        X2="15"
                        Y2="15"
                        Stroke="Black"
                        StrokeThickness="1"
                        />
                    <Button
                        x:Name="deleteVariableButton"
                        Canvas.Left="10"
                        Canvas.Top="0"
                        Width="20"
                        Height="20"
                        Cursor="Hand"
                        Focusable="False"
                        Command="{StaticResource Commands.DeleteVariable}"
                        CommandParameter="{Binding}"
                        Template="{StaticResource deleteButtonTemplate}"
                        />
                </Canvas>
            </controls:AdornedControl.AdornerContent>
            </controls:AdornedControl>
        </DataTemplate>

        <!-- 
        Define a data-template for the DomainViewModel class.
        -->
        <DataTemplate
            DataType="{x:Type viewModels:DomainViewModel}"
            >
            
            <!-- 
            An adorned control is used, to represent the node. 
            When the user hovers the mouse cursor over the node, the 
            'delete node' adorner pops up and allows them to delete the node.
            -->
            <controls:AdornedControl
                HorizontalAdornerPlacement="Outside"
                VerticalAdornerPlacement="Outside"
                AdornerOffsetX="-12"
                AdornerOffsetY="8"
                IsMouseOverShowEnabled="{Binding ElementName=modelControl, Path=IsNotDragging}"
                >

                <Grid
                    Width="120"
                    Height="60"
                    >

                    <!-- This ellipse is the main visual for the domain. -->
                    <Ellipse
                        Stroke="Black"
                        Fill="White"
                        />

                <!-- 
                This grid contains the domain's name and connectors.
                The margin is negative so that the connectors overlap the body of the variable and it's selection border.
                -->
                <Grid Margin="-8">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" MinWidth="10" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>

                    <!-- The name of the domain. -->
                    <TextBox
                        Grid.Column="1"
                        Grid.Row="1"
                        FontWeight="Bold"
                        Text="{Binding Name, Mode=TwoWay}"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        />

                    <!-- The domain expression text. -->
                    <TextBox
                        Grid.Column="1"
                        Grid.Row="2"
                        Text="{Binding Path=Expression.Text, Mode=TwoWay}"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        />

                    <!-- 
                    Define the domain's four connectors, one on each edge of the domain.
                    -->
                    <controls:ConnectorItem 
                        Grid.Row="0"
                        Grid.Column="1"
                        DataContext="{Binding Connectors[0]}"
                        />

                    <controls:ConnectorItem 
                        Grid.Row="1"
                        Grid.Column="2"
                        DataContext="{Binding Connectors[1]}"
                        />

                    <controls:ConnectorItem 
                        Grid.Row="2"
                        Grid.Column="1"
                        DataContext="{Binding Connectors[2]}"
                        />

                    <controls:ConnectorItem 
                        Grid.Row="1"
                        Grid.Column="0"
                        DataContext="{Binding Connectors[3]}"
                        />
                </Grid>
            </Grid>
            <controls:AdornedControl.AdornerContent>

                <!-- 
                This is the adorner that pops up when the user hovers the mouse over the variable.
                It displays a button that the user can click to delete the variable.
                -->
                <Canvas
                    x:Name="domainAdornerCanvas"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Top"
                    Width="30"
                    Height="30"
                    >

                    <Line
                        X1="0"
                        Y1="30"
                        X2="15"
                        Y2="15"
                        Stroke="Black"
                        StrokeThickness="1"
                        />
                    <Button
                        x:Name="deleteDomainButton"
                        Canvas.Left="10"
                        Canvas.Top="0"
                        Width="20"
                        Height="20"
                        Cursor="Hand"
                        Focusable="False"
                        Command="{StaticResource Commands.DeleteDomain}"
                        CommandParameter="{Binding}"
                        Template="{StaticResource deleteButtonTemplate}"
                        />
                        </Canvas>
                    </controls:AdornedControl.AdornerContent>
                </controls:AdornedControl>
            </DataTemplate>

        <!-- 
        Define a data-template for the ConstraintViewModel class.
        This generates the UI for each constraint.
        -->
        <DataTemplate
            DataType="{x:Type viewModels:ConstraintViewModel}"
            >

            <!-- 
            An adorned control is used, to represent the node. 
            When the user hovers the mouse cursor over the node, the 
            'delete node' adorner pops up and allows them to delete the node.
            -->
            <controls:AdornedControl
                HorizontalAdornerPlacement="Outside"
                VerticalAdornerPlacement="Outside"
                AdornerOffsetX="-12"
                AdornerOffsetY="8"
                IsMouseOverShowEnabled="{Binding ElementName=modelControl, Path=IsNotDragging}"
                >

                <Grid
                    Width="120"
                    Height="60"
                    >

                <!-- This polygon is the main visual for the constraint. -->
                <Polygon
                    Points="0,60 120,60 60,0 0,60"
                    Stroke="Black"
                    Fill="White"
                    />

                <!-- 
                This grid contains the domain's name and connectors.
                The margin is negative so that the connectors overlap the body of the variable and it's selection border.
                -->
                <Grid Margin="-8">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" MinWidth="10" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>

                    <!-- The name of the constraint. -->
                    <TextBox
                        Grid.Column="1"
                        Grid.Row="1"
                        FontWeight="Bold"
                        Text="{Binding Name, Mode=TwoWay}"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        />

                    <!-- The constraint expression text. -->
                    <TextBox
                        Grid.Column="1"
                        Grid.Row="2"
                        Text="{Binding Path=Expression.Text, Mode=TwoWay}"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        />

                    <!-- 
                    Define the constraint's four connectors, one on each edge of the constraint.
                    -->

                    <controls:ConnectorItem 
                        Grid.Row="0"
                        Grid.Column="1"
                        DataContext="{Binding Connectors[0]}"
                        />

                    <controls:ConnectorItem 
                        Grid.Row="1"
                        Grid.Column="2"
                        DataContext="{Binding Connectors[1]}"
                        />

                    <controls:ConnectorItem 
                        Grid.Row="2"
                        Grid.Column="1"
                        DataContext="{Binding Connectors[2]}"
                        />

                    <controls:ConnectorItem 
                        Grid.Row="1"
                        Grid.Column="0"
                        DataContext="{Binding Connectors[3]}"
                        />
                </Grid>
            </Grid>

            <controls:AdornedControl.AdornerContent>

                <!-- 
                This is the adorner that pops up when the user hovers the mouse over the variable.
                It displays a button that the user can click to delete the variable.
                -->
                <Canvas
                    x:Name="variableAdornerCanvas"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Top"
                    Width="30"
                    Height="30"
                    >
                    <Line
                        X1="0"
                        Y1="30"
                        X2="15"
                        Y2="15"
                        Stroke="Black"
                        StrokeThickness="1"
                        />
                    <Button
                        x:Name="deleteConstraintButton"
                        Canvas.Left="10"
                        Canvas.Top="0"
                        Width="20"
                        Height="20"
                        Cursor="Hand"
                        Focusable="False"
                        Command="{StaticResource Commands.DeleteConstraint}"
                        CommandParameter="{Binding}"
                        Template="{StaticResource deleteButtonTemplate}"
                        />
                    </Canvas>
                </controls:AdornedControl.AdornerContent>
            </controls:AdornedControl>
        </DataTemplate>
            
        </ResourceDictionary>
    </Window.Resources>
    
    <Window.InputBindings>

        <!-- Bind input to commands. -->
        <KeyBinding
			Key="Delete"
			Command="{StaticResource Commands.DeleteSelectedGraphics}" />

    </Window.InputBindings>

    <Window.CommandBindings>

        <!-- Bind commands to event handlers. -->
        <CommandBinding 
            Command="{StaticResource Commands.DeleteSelectedGraphics}" 
            Executed="DeleteSelectedGraphics_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.CreateVariable}" 
            Executed="CreateVariable_Executed" />
        <CommandBinding 
            Command="{StaticResource Commands.CreateConstraint}" 
            Executed="CreateConstraint_Executed" />
        <CommandBinding 
            Command="{StaticResource Commands.CreateDomain}" 
            Executed="CreateDomain_Executed" />
        <CommandBinding 
            Command="{StaticResource Commands.DeleteConnection}" 
            Executed="DeleteConnection_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.DeleteVariable}" 
            Executed="DeleteVariable_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.DeleteDomain}" 
            Executed="DeleteDomain_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.DeleteConstraint}" 
            Executed="DeleteConstraint_Executed" 
            />

        <CommandBinding Command="{StaticResource Commands.Solve}" Executed="MenuFileSolve_Click" />
        <CommandBinding Command="ApplicationCommands.Close" Executed="FileCloseCommand" />

    </Window.CommandBindings>

    <Window.ContextMenu>

        <ContextMenu>

            <MenuItem
                Header="Create Variable"
                Command="{StaticResource Commands.CreateVariable}"
                ToolTip="Create a new variable" />

        </ContextMenu>

    </Window.ContextMenu>

    <Window.DataContext>
        <viewModels:MainWindowViewModel />
    </Window.DataContext>

    <DockPanel LastChildFill="True">

        <Menu DockPanel.Dock="Top">
            <MenuItem Header="File">
                <Separator/>
                <MenuItem Header="Exit" Command="ApplicationCommands.Close">
                    <MenuItem.Icon>
                        <Image Source="/Images/Transparent.png" />
                    </MenuItem.Icon>
                </MenuItem>
            </MenuItem>
            <MenuItem Header="Edit">
            </MenuItem>
            <MenuItem Header="Model">
                <MenuItem Header="Solve..." Command="{StaticResource Commands.Solve}">
                    <MenuItem.Icon>
                        <Image Source="/Images/Transparent.png" />
                    </MenuItem.Icon>
                </MenuItem>
                <Separator/>
                <MenuItem Header="Add Variable" Command="{StaticResource Commands.CreateVariable}">
                    <MenuItem.Icon>
                        <Image Source="/Images/Transparent.png" />
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="Add Constraint" Command="{StaticResource Commands.CreateConstraint}">
                    <MenuItem.Icon>
                        <Image Source="/Images/Transparent.png" />
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="Add Domain" Command="{StaticResource Commands.CreateDomain}">
                    <MenuItem.Icon>
                        <Image Source="/Images/Transparent.png" />
                    </MenuItem.Icon>
                </MenuItem>
            </MenuItem>
        </Menu>

        <StackPanel>

            <!-- View mode selector -->
            <ComboBox 
                x:Name="viewSelectorBox"
                ItemsSource="{Binding AvailableDisplayModes}"
                SelectedItem="{Binding SelectedDisplayMode, Mode=TwoWay}"
                />

            <ContentPresenter x:Name="contentView" Content="{Binding SelectedDisplayViewModel}"/>

        </StackPanel>
    </DockPanel>
</Window>
